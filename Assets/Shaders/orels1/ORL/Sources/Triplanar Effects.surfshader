BEGIN_OPTIONS
  ShaderName "orels1/Source/Dirt"
END_OPTIONS

BEGIN_PROPERTIES
  [ToggleUI]UI_TriplanarEffectsHeader("# Triplanar Effects (Dirt, Damage, Puddles)", Int) = 0
	[NoScaleOffset]_TriplanarMask("Triplanar Masks &&", 2D) = "white" {}
	_TriplanarMaskTiling("Tiling", Float) = 50
  
  // Dirt
  [ToggleUI]UI_DirtHeader("## Dirt", Int) = 0
  [KeywordEnum(None, Local Space, World Space)]DIRT_MODE("Dirt Mode", Int) = 0
	_DirtMaskPower("Dirt Mask Power [!DIRT_MODE_NONE]", Float) = 1
	_DirtColor("Dirt Color [!DIRT_MODE_NONE]", Color) = (0.0365, 0.0211, 0.00893, 1)
	_DirtSmooth("Dirt Smoothness [!DIRT_MODE_NONE]", Range(0,1)) = 0.25
	_DirtGradPower("Dirt Gradient Power [DIRT_MODE_LOCAL_SPACE]", Float) = 3
	_DirtGradPosition("Dirt Gradient position [DIRT_MODE_LOCAL_SPACE]", Range(0,1)) = 0.5
	_DirtGradientMin("Dirt Gradient Min [!DIRT_MODE_NONE]", Float) = 0
	_DirtGradientMax("Dirt Gradient Max [!DIRT_MODE_NONE]", Float) = 10
	_DirtOpacity("Dirt Opacity [!DIRT_MODE_NONE]", Float) = 0.3
	[ToggleUI]_DirtPlanarMask("Use Planar Mask [!DIRT_MODE_NONE]", Int) = 1
	
	// Damage
	[ToggleUI]UI_DamageHeader("## Damage", Int) = 0
	[KeywordEnum(None, Enabled)]DAMAGE_MODE("Damage Mode", Int) = 0
	[NoScaleOffset]_DamageAlbedo("Damage Albedo && [DAMAGE_MODE_ENABLED]", 2D) = "gray" {}
	_DamageAlbedoTiling("Tiling [DAMAGE_MODE_ENABLED]", Float) = 1
	_DamageColor("Damage Color [DAMAGE_MODE_ENABLED]", Color) = (0.562, 0.441, 0.378, 1)
	[ToggleUI]UI_DamageSmoothSlider("!DRAWER MinMax _DamageSmoothMin _DamageSmoothMax [DAMAGE_MODE_ENABLED]", Int) = 0
	_DamageSmoothMin("Smoothness Min", Float) = 0
	_DamageSmoothMax("Max", Float) = 1
	_DamageNormal("Damage Normal && [DAMAGE_MODE_ENABLED]", 2D) = "bump" {}
	_DamageNormalScale("Normal Scale [DAMAGE_MODE_ENABLED]", Range(-1, 1)) = 1
	[ToggleUI]_DamageNormalFlipY("Flip Y (UE Mode) [DAMAGE_MODE_ENABLED]", Int) = 0
	_DamageAmount("Damage Amount [DAMAGE_MODE_ENABLED]", Range(0, 1)) = 0.5
END_PROPERTIES

BEGIN_DEFINES
  #pragma shader_feature_local DIRT_MODE_NONE DIRT_MODE_LOCAL_SPACE DIRT_MODE_WORLD_SPACE
  #if !defined(DIRT_MODE_LOCAL_SPACE) && !defined(DIRT_MODE_WORLD_SPACE)
    #define DIRT_MODE_NONE
  #endif
  
  #pragma shader_feature_local DAMAGE_MODE_NONE DAMAGE_MODE_ENABLED
  #if !defined(DAMAGE_MODE_ENABLED)
    #define DAMAGE_MODE_NONE
  #endif
END_DEFINES

BEGIN_CBUFFER
	half _TriplanarMaskTiling;
	
	// Dirt
	half _DirtMaskPower;
	half4 _DirtColor;
	half _DirtSmooth;
	half _DirtGradPower;
	half _DirtGradPosition;
	half _DirtGradientMin;
	half _DirtGradientMax;
	half _DirtOpacity;
	int _DirtPlanarMask;
	
	// Damage
	half4 _DamageAlbedo_TexelSize;
	half _DamageAlbedoTiling;
	half4 _DamageColor;
	half _DamageSmoothMin;
	half _DamageSmoothMax;
	half _DamageNormalScale;
	int _DamageNormalFlipY;
	half _DamageAmount;
END_CBUFFER

BEGIN_CODE
  TEXTURE2D(_TriplanarMask);
  SAMPLER(sampler_TriplanarMask);
  TEXTURE2D(_DamageAlbedo);
  #if defined(DAMAGE_MODE_ENABLED)
  TEXTURE2D(_DamageNormal);
  SAMPLER(sampler_DamageNormal);
  #endif

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
    #if defined(DIRT_MODE_NONE) && defined(DAMAGE_MODE_NONE)
    return;
    #else
	  half3 wsAligned = (d.worldSpacePosition / -_TriplanarMaskTiling);
	  
	  half3 xySample = SAMPLE_TEXTURE2D(_TriplanarMask, sampler_TriplanarMask, wsAligned.xy).rgb;
	  half3 yzSample = SAMPLE_TEXTURE2D(_TriplanarMask, sampler_TriplanarMask, wsAligned.yz).rgb;
	  half3 xzSample = SAMPLE_TEXTURE2D(_TriplanarMask, sampler_TriplanarMask, wsAligned.xz).rgb;
	  
	  half xNormalMask = saturate(lerp(-1, 1, abs(d.worldSpaceNormal.x)));
	  half zNormalMask = saturate(lerp(-1, 1, abs(d.worldSpaceNormal.z)));
	  
	  half3 triplanarMask = lerp(lerp(xzSample, yzSample, xNormalMask), xySample, zNormalMask);
	  
	  half damageMask = triplanarMask.g;
	  half dirtMask = triplanarMask.b;
	  
	  // Damage
	  #if defined(DAMAGE_MODE_ENABLED)
	  damageMask *= _DamageAmount;
	  half2 damageUV = d.texcoord0.xy * _DamageAlbedoTiling;
	  UNITY_BRANCH
	  if (_DamageAlbedo_TexelSize.w > 8) {
	    half3 damageAlbedo = SAMPLE_TEXTURE2D(_DamageAlbedo, sampler_TriplanarMask, damageUV).rgb;
	    o.Albedo = lerp(o.Albedo, damageAlbedo, damageMask);
	  } else {
	    o.Albedo = lerp(o.Albedo, o.Albedo * _DamageColor, damageMask );
	  }
	  
	  half4 damageNormalPacked = SAMPLE_TEXTURE2D(_DamageNormal, sampler_DamageNormal, damageUV);
	  if (_DamageNormalFlipY) {
	    damageNormalPacked.y = 1-damageNormalPacked.y;
	  }
	  half3 damageNormal = UnpackScaleNormal(damageNormalPacked, _DamageNormalScale * damageMask);
	  o.Normal = BlendNormals(o.Normal, damageNormal);
	  
	  o.Smoothness = lerp(o.Smoothness, clamp(o.Smoothness, _DamageSmoothMin, _DamageSmoothMax), damageMask);
	  #endif
	  
	  // Dirt
	  #if !defined(DIRT_MODE_NONE)
	  dirtMask = pow(dirtMask, _DirtMaskPower);
	  
	  #if defined(DIRT_MODE_LOCAL_SPACE)
	  // obj space grad
	  half gradMask = (d.localSpacePosition).y;
	  gradMask += _DirtGradPosition;
	  gradMask = 1 - gradMask;
	  gradMask = pow(gradMask, _DirtGradPower);
	  dirtMask *= saturate(gradMask);
	  #endif
	  #if defined(DIRT_MODE_WORLD_SPACE)
	  // world space grad
	  half gradMask = (d.worldSpacePosition - TransformObjectToWorld(half3(0,0,0))).y;
	  gradMask = (gradMask - _DirtGradientMax) / (_DirtGradientMin - _DirtGradientMax);
	  gradMask = saturate(gradMask);
	  dirtMask *= gradMask;
	  #endif
	  
	  dirtMask = clamp(dirtMask, 0, saturate(_DirtOpacity));
	  
	  if (_DirtPlanarMask) {
      half planarMask = dot(d.worldSpaceNormal, half3(0,-1,0));
      planarMask = pow(planarMask, 0.5);
      planarMask = lerp(-1, 1, planarMask);
      planarMask = saturate(planarMask);
      dirtMask *= planarMask;
	  }
	  
	  o.Albedo = lerp(o.Albedo, _DirtColor, dirtMask);
	  o.Metallic = lerp(o.Metallic, 0, dirtMask);
	  o.Smoothness = lerp(o.Smoothness, _DirtSmooth, dirtMask);	  
	  #endif
	  
	  #endif
	}

END_CODE

