BEGIN_OPTIONS
  ShaderName "orels1/Source/Layered Material"
END_OPTIONS

BEGIN_PROPERTIES
  [ToggleUI]UI_LayeredMatHeader("# Layers", Int) = 0
  [ToggleUI]UI_LayeredMatLayersCount("!REF _LayeredMatLayersCount", Int) = 0
  [IntRange]_LayeredMatLayersCount("Layer Count", Range(1, 4)) = 2
  [Toggle(_VERTEX_DEBUGGING)]_LMVertexColorDebugging("Vertex Color Debugging", Int) = 0
  //[ToggleUI]UI_LayeredMatNote("!NOTE Layered Material uses vertex colors to mix textures", Int) = 0
  
  // Layer 1
  [ToggleUI]UI_LMLayer1Header("## Layer 1", Int) = 0
  [ToggleUI]UI_LMLayer1Note("!NOTE Uses Black vertex color", Int) = 0
  _LMLayer1Color ("Main Color", Color) = (1, 1, 1, 1)
  _LMLayer1MainTex("Albedo", 2D) = "white" {}
  [Enum(RGB, 0, R, 1, G, 2, B, 3)]_LMLayer1AlbedoChannel("Albedo Channel [_LMLayer1MainTex]", Int) = 0
  [NoScaleOffset]_LMLayer1MaskMap("Masks &", 2D)  = "white" {}
  [ToggleUI]UI_LMLayer1ChannelSelector("!DRAWER MultiProperty _LMLayer1MetalChannel _LMLayer1AOChannel _LMLayer1DetailMaskChannel _LMLayer1SmoothChannel [_LMLayer1MaskMap]", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer1MetalChannel("Metal", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer1AOChannel("AO", Int) = 1
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer1DetailMaskChannel("Detail", Int) = 2
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer1SmoothChannel("Smooth", Int) = 3
  _LMLayer1Smoothness("Smoothness [!_LMLayer1MaskMap]", Range(0,1)) = 0.5
  [ToggleUI]_LMLayer1RoughnessMode("Roughness Mode [_LMLayer1MaskMap]", Int) = 0
  [ToggleUI]UI_LMLayer1SmoothnessRemap("!DRAWER MinMax _LMLayer1SmoothnessRemap.x _LMLayer1SmoothnessRemap.y [_LMLayer1MaskMap]", Float) = 0
  _LMLayer1Metallic("Metallic [!_LMLayer1MaskMap]", Range(0,1)) = 0
  [ToggleUI]UI_LMLayer1MetallicRemap("!DRAWER MinMax _LMLayer1MetallicRemap.x _LMLayer1MetallicRemap.y [_LMLayer1MaskMap]", Float) = 0
  [HideInInspector]_LMLayer1MetallicRemap("Metallic Remap", Vector) = (0,1,0,1)
  [HideInInspector]_LMLayer1SmoothnessRemap("Smoothness Remap", Vector) = (0,1,0,1)
  _LMLayer1OcclusionStrength("AO Strength", Range(0,1)) = 1
  [NoScaleOffset]_LMLayer1BumpMap("Normal Map &&", 2D) = "bump" {}
  _LMLayer1BumpScale("Normal Map Scale", Range(-1,1)) = 1
  [ToggleUI]_LMLayer1FlipBumpY("Flip Y (UE Mode) [_LMLayer1BumpMap]", Int) = 0
  
  // Layer 2
  [ToggleUI]UI_LMLayer2Header("## Layer 2 [_LayeredMatLayersCount > 1]", Int) = 0
  [ToggleUI]UI_LMLayer2Note("!NOTE Uses Red vertex color", Int) = 0
  _LMLayer2Color ("Main Color [_LayeredMatLayersCount > 1]", Color) = (1, 1, 1, 1)
  _LMLayer2MainTex("Albedo [_LayeredMatLayersCount > 1]", 2D) = "white" {}
  [Enum(RGB, 0, R, 1, G, 2, B, 3)]_LMLayer2AlbedoChannel("Albedo Channel [_LMLayer2MainTex && _LayeredMatLayersCount > 1]", Int) = 0
  [NoScaleOffset]_LMLayer2MaskMap("Masks & [_LayeredMatLayersCount > 1]", 2D)  = "white" {}
  [ToggleUI]UI_LMLayer2ChannelSelector("!DRAWER MultiProperty _LMLayer2MetalChannel _LMLayer2AOChannel _LMLayer2DetailMaskChannel _LMLayer2SmoothChannel [_LMLayer2MaskMap && _LayeredMatLayersCount > 1]", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer2MetalChannel("Metal", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer2AOChannel("AO", Int) = 1
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer2DetailMaskChannel("Detail", Int) = 2
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer2SmoothChannel("Smooth", Int) = 3
  _LMLayer2Smoothness("Smoothness [!_LMLayer2MaskMap && _LayeredMatLayersCount > 1]", Range(0,1)) = 0.5
  [ToggleUI]_LMLayer2RoughnessMode("Roughness Mode [_LMLayer2MaskMap && _LayeredMatLayersCount > 1]", Int) = 0
  [ToggleUI]UI_LMLayer2SmoothnessRemap("!DRAWER MinMax _LMLayer2SmoothnessRemap.x _LMLayer2SmoothnessRemap.y [_LMLayer2MaskMap && _LayeredMatLayersCount > 1]", Float) = 0
  _LMLayer2Metallic("Metallic [!_LMLayer2MaskMap && _LayeredMatLayersCount > 1]", Range(0,1)) = 0
  [ToggleUI]UI_LMLayer2MetallicRemap("!DRAWER MinMax _LMLayer2MetallicRemap.x _LMLayer2MetallicRemap.y [_LMLayer2MaskMap && _LayeredMatLayersCount > 1]", Float) = 0
  [HideInInspector]_LMLayer2MetallicRemap("Metallic Remap", Vector) = (0,1,0,1)
  [HideInInspector]_LMLayer2SmoothnessRemap("Smoothness Remap", Vector) = (0,1,0,1)
  _LMLayer2OcclusionStrength("AO Strength [_LayeredMatLayersCount > 1]", Range(0,1)) = 1
  [NoScaleOffset]_LMLayer2BumpMap("Normal Map && [_LayeredMatLayersCount > 1]", 2D) = "bump" {}
  _LMLayer2BumpScale("Normal Map Scale [_LayeredMatLayersCount > 1]", Range(-1,1)) = 1
  [ToggleUI]_LMLayer2FlipBumpY("Flip Y (UE Mode) [_LMLayer2BumpMap && _LayeredMatLayersCount > 1]", Int) = 0
  
  // Layer 3
  [ToggleUI]UI_LMLayer3Header("## Layer 3 [_LayeredMatLayersCount > 2]", Int) = 0
  [ToggleUI]UI_LMLayer3Note("!NOTE Uses Green vertex color", Int) = 0
  _LMLayer3Color ("Main Color [_LayeredMatLayersCount > 2]", Color) = (1, 1, 1, 1)
  _LMLayer3MainTex("Albedo [_LayeredMatLayersCount > 2]", 2D) = "white" {}
  [Enum(RGB, 0, R, 1, G, 2, B, 3)]_LMLayer3AlbedoChannel("Albedo Channel [_LMLayer3MainTex && _LayeredMatLayersCount > 2]", Int) = 0
  [NoScaleOffset]_LMLayer3MaskMap("Masks & [_LayeredMatLayersCount > 2]", 2D)  = "white" {}
  [ToggleUI]UI_LMLayer3ChannelSelector("!DRAWER MultiProperty _LMLayer3MetalChannel _LMLayer3AOChannel _LMLayer3DetailMaskChannel _LMLayer3SmoothChannel [_LMLayer3MaskMap && _LayeredMatLayersCount > 2]", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer3MetalChannel("Metal", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer3AOChannel("AO", Int) = 1
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer3DetailMaskChannel("Detail", Int) = 2
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer3SmoothChannel("Smooth", Int) = 3
  _LMLayer3Smoothness("Smoothness [!_LMLayer3MaskMap && _LayeredMatLayersCount > 2]", Range(0,1)) = 0.5
  [ToggleUI]_LMLayer3RoughnessMode("Roughness Mode [_LMLayer3MaskMap && _LayeredMatLayersCount > 2]", Int) = 0
  [ToggleUI]UI_LMLayer3SmoothnessRemap("!DRAWER MinMax _LMLayer3SmoothnessRemap.x _LMLayer3SmoothnessRemap.y [_LMLayer3MaskMap && _LayeredMatLayersCount > 2]", Float) = 0
  _LMLayer3Metallic("Metallic [!_LMLayer3MaskMap && _LayeredMatLayersCount > 2]", Range(0,1)) = 0
  [ToggleUI]UI_LMLayer3MetallicRemap("!DRAWER MinMax _LMLayer3MetallicRemap.x _LMLayer3MetallicRemap.y [_LMLayer3MaskMap && _LayeredMatLayersCount > 2]", Float) = 0
  [HideInInspector]_LMLayer3MetallicRemap("Metallic Remap", Vector) = (0,1,0,1)
  [HideInInspector]_LMLayer3SmoothnessRemap("Smoothness Remap", Vector) = (0,1,0,1)
  _LMLayer3OcclusionStrength("AO Strength [_LayeredMatLayersCount > 2]", Range(0,1)) = 1
  [NoScaleOffset]_LMLayer3BumpMap("Normal Map && [_LayeredMatLayersCount > 2]", 2D) = "bump" {}
  _LMLayer3BumpScale("Normal Map Scale [_LayeredMatLayersCount > 2]", Range(-1,1)) = 1
  [ToggleUI]_LMLayer3FlipBumpY("Flip Y (UE Mode) [_LMLayer3BumpMap && _LayeredMatLayersCount > 2]", Int) = 0
  
  // Layer 4
  [ToggleUI]UI_LMLayer4Header("## Layer 4 [_LayeredMatLayersCount > 3]", Int) = 0
  [ToggleUI]UI_LMLayer4Note("!NOTE Uses Blue vertex color", Int) = 0
  _LMLayer4Color ("Main Color [_LayeredMatLayersCount > 3]", Color) = (1, 1, 1, 1)
  _LMLayer4MainTex("Albedo [_LayeredMatLayersCount > 3]", 2D) = "white" {}
  [Enum(RGB, 0, R, 1, G, 2, B, 3)]_LMLayer4AlbedoChannel("Albedo Channel [_LMLayer4MainTex && _LayeredMatLayersCount > 3]", Int) = 0
  [NoScaleOffset]_LMLayer4MaskMap("Masks & [_LayeredMatLayersCount > 3]", 2D)  = "white" {}
  [ToggleUI]UI_LMLayer4ChannelSelector("!DRAWER MultiProperty _LMLayer4MetalChannel _LMLayer4AOChannel _LMLayer4DetailMaskChannel _LMLayer4SmoothChannel [_LMLayer4MaskMap && _LayeredMatLayersCount > 3]", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer4MetalChannel("Metal", Int) = 0
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer4AOChannel("AO", Int) = 1
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer4DetailMaskChannel("Detail", Int) = 2
  [Enum(R, 0, G, 1, B, 2, A, 3)]_LMLayer4SmoothChannel("Smooth", Int) = 3
  _LMLayer4Smoothness("Smoothness [!_LMLayer4MaskMap && _LayeredMatLayersCount > 3]", Range(0,1)) = 0.5
  [ToggleUI]_LMLayer4RoughnessMode("Roughness Mode [_LMLayer4MaskMap && _LayeredMatLayersCount > 3]", Int) = 0
  [ToggleUI]UI_LMLayer4SmoothnessRemap("!DRAWER MinMax _LMLayer4SmoothnessRemap.x _LMLayer4SmoothnessRemap.y [_LMLayer4MaskMap && _LayeredMatLayersCount > 3]", Float) = 0
  _LMLayer4Metallic("Metallic [!_LMLayer4MaskMap && _LayeredMatLayersCount > 3]", Range(0,1)) = 0
  [ToggleUI]UI_LMLayer4MetallicRemap("!DRAWER MinMax _LMLayer4MetallicRemap.x _LMLayer4MetallicRemap.y [_LMLayer4MaskMap && _LayeredMatLayersCount > 3]", Float) = 0
  [HideInInspector]_LMLayer4MetallicRemap("Metallic Remap", Vector) = (0,1,0,1)
  [HideInInspector]_LMLayer4SmoothnessRemap("Smoothness Remap", Vector) = (0,1,0,1)
  _LMLayer4OcclusionStrength("AO Strength [_LayeredMatLayersCount > 3]", Range(0,1)) = 1
  [NoScaleOffset]_LMLayer4BumpMap("Normal Map && [_LayeredMatLayersCount > 3]", 2D) = "bump" {}
  _LMLayer4BumpScale("Normal Map Scale [_LayeredMatLayersCount > 3]", Range(-1,1)) = 1
  [ToggleUI]_LMLayer4FlipBumpY("Flip Y (UE Mode) [_LMLayer4BumpMap && _LayeredMatLayersCount > 3]", Int) = 0
END_PROPERTIES

BEGIN_DEFINES
  #pragma shader_feature_local _VERTEX_DEBUGGING
END_DEFINES

BEGIN_CBUFFER
  int _LayeredMatLayersCount;

  // Layer 1
	half4 _LMLayer1Color;
	half4 _LMLayer1MainTex_ST;
	int _LMLayer1AlbedoChannel;
	
	int _LMLayer1MetalChannel;
	int _LMLayer1AOChannel;
	int _LMLayer1DetailMaskChannel;
	int _LMLayer1SmoothChannel;
	int _LMLayer1RoughnessMode;
	
	half _LMLayer1Smoothness;
	half _LMLayer1Metallic;
	half4 _LMLayer1MetallicRemap;
	half4 _LMLayer1SmoothnessRemap;
	half4 _LMLayer1MaskMap_TexelSize;
	half _LMLayer1OcclusionStrength;
	half _LMLayer1BumpScale;
	int _LMLayer1FlipBumpY;
	
  // Layer 2
  half4 _LMLayer2Color;
  half4 _LMLayer2MainTex_ST;
  int _LMLayer2AlbedoChannel;
  
  int _LMLayer2MetalChannel;
  int _LMLayer2AOChannel;
  int _LMLayer2DetailMaskChannel;
  int _LMLayer2SmoothChannel;
  int _LMLayer2RoughnessMode;
  
  half _LMLayer2Smoothness;
  half _LMLayer2Metallic;
  half4 _LMLayer2MetallicRemap;
  half4 _LMLayer2SmoothnessRemap;
  half4 _LMLayer2MaskMap_TexelSize;
  half _LMLayer2OcclusionStrength;
  half _LMLayer2BumpScale;
  int _LMLayer2FlipBumpY;
  
  // Layer 3
  half4 _LMLayer3Color;
  half4 _LMLayer3MainTex_ST;
  int _LMLayer3AlbedoChannel;
  
  int _LMLayer3MetalChannel;
  int _LMLayer3AOChannel;
  int _LMLayer3DetailMaskChannel;
  int _LMLayer3SmoothChannel;
  int _LMLayer3RoughnessMode;
  
  half _LMLayer3Smoothness;
  half _LMLayer3Metallic;
  half4 _LMLayer3MetallicRemap;
  half4 _LMLayer3SmoothnessRemap;
  half4 _LMLayer3MaskMap_TexelSize;
  half _LMLayer3OcclusionStrength;
  half _LMLayer3BumpScale;
  int _LMLayer3FlipBumpY;
  
  // Layer 4
  half4 _LMLayer4Color;
  half4 _LMLayer4MainTex_ST;
  int _LMLayer4AlbedoChannel;
  
  int _LMLayer4MetalChannel;
  int _LMLayer4AOChannel;
  int _LMLayer4DetailMaskChannel;
  int _LMLayer4SmoothChannel;
  int _LMLayer4RoughnessMode;
  
  half _LMLayer4Smoothness;
  half _LMLayer4Metallic;
  half4 _LMLayer4MetallicRemap;
  half4 _LMLayer4SmoothnessRemap;
  half4 _LMLayer4MaskMap_TexelSize;
  half _LMLayer4OcclusionStrength;
  half _LMLayer4BumpScale;
  int _LMLayer4FlipBumpY;
END_CBUFFER

BEGIN_SUBSHADERS
  "Utility.surfshader"
END_SUBSHADERS

BEGIN_CODE
  TEXTURE2D(_LMLayer1MainTex);
  TEXTURE2D(_LMLayer1MaskMap);
  TEXTURE2D(_LMLayer1BumpMap);
  TEXTURE2D(_LMLayer2MainTex);
  TEXTURE2D(_LMLayer2MaskMap);
  TEXTURE2D(_LMLayer2BumpMap);
  TEXTURE2D(_LMLayer3MainTex);
  TEXTURE2D(_LMLayer3MaskMap);
  TEXTURE2D(_LMLayer3BumpMap);
  TEXTURE2D(_LMLayer4MainTex);
  TEXTURE2D(_LMLayer4MaskMap);
  TEXTURE2D(_LMLayer4BumpMap);
  SAMPLER(sampler_LMLayer1MainTex);
  SAMPLER(sampler_LMLayer1MaskMap);
  SAMPLER(sampler_LMLayer1BumpMap);
  
  void SurfaceFunction(inout Surface o, ShaderData d)
  {
    #if defined(_VERTEX_DEBUGGING)
      o.Albedo = d.vertexColor.rgb;
      o.Emission = d.vertexColor.rgb * 0.2;
    #else
    half2 uv = d.texcoord0.xy * _LMLayer1MainTex_ST.xy + _LMLayer1MainTex_ST.zw;
    
    // Layer 1
    half4 albedo = SAMPLE_TEXTURE2D(_LMLayer1MainTex, sampler_LMLayer1MainTex, uv);
    if (_LMLayer1AlbedoChannel > 0) {
      albedo.rgb = albedo[_LMLayer1AlbedoChannel].xxx;
    }
    half4 masks = SAMPLE_TEXTURE2D(_LMLayer1MaskMap, sampler_LMLayer1MaskMap, uv);
    half4 normalTex = SAMPLE_TEXTURE2D(_LMLayer1BumpMap, sampler_LMLayer1BumpMap, uv);
    if (_LMLayer1FlipBumpY) {
      normalTex.y = 1-normalTex.y;
    }
    half3 normal = UnpackScaleNormal(normalTex, _LMLayer1BumpScale);
    int hasMasks = _LMLayer1MaskMap_TexelSize.z > 8; 
    half metal = masks[_LMLayer1MetalChannel];
    half smooth = masks[_LMLayer1SmoothChannel];
    if (_LMLayer1RoughnessMode) {
      smooth = 1 - smooth;
    }
    half detailMask = masks[_LMLayer1DetailMaskChannel];
    half occlusion = masks[_LMLayer1AOChannel];
    metal = remap(metal, 0, 1, _LMLayer1MetallicRemap.x, _LMLayer1MetallicRemap.y);
    smooth = remap(smooth, 0, 1, _LMLayer1SmoothnessRemap.x, _LMLayer1SmoothnessRemap.y);
    
    o.Metallic = lerp(_LMLayer1Metallic, metal, hasMasks);
    o.Smoothness = lerp(_LMLayer1Smoothness, smooth, hasMasks);
    o.Occlusion = lerp(1, occlusion, _LMLayer1OcclusionStrength);
    o.Normal = normal;
    o.Albedo = albedo.rgb * _LMLayer1Color.rgb;
    o.Alpha = albedo.a * _LMLayer1Color.a;
    
    UNITY_BRANCH
    if (_LayeredMatLayersCount < 2) return;
    
    // Layer 2
    uv = d.texcoord0.xy * _LMLayer2MainTex_ST.xy + _LMLayer2MainTex_ST.zw;
    half mask = d.vertexColor.r;
        
    albedo = SAMPLE_TEXTURE2D(_LMLayer2MainTex, sampler_LMLayer1MainTex, uv);
    if (_LMLayer2AlbedoChannel > 0) {
      albedo.rgb = albedo[_LMLayer2AlbedoChannel].xxx;
    }
    masks = SAMPLE_TEXTURE2D(_LMLayer2MaskMap, sampler_LMLayer1MaskMap, uv);
    normalTex = SAMPLE_TEXTURE2D(_LMLayer2BumpMap, sampler_LMLayer1BumpMap, uv);
    if (_LMLayer2FlipBumpY) {
      normalTex.y = 1-normalTex.y;
    }
    normal = UnpackScaleNormal(normalTex, _LMLayer2BumpScale * mask);
    hasMasks = _LMLayer2MaskMap_TexelSize.z > 8; 
    metal = masks[_LMLayer2MetalChannel];
    smooth = masks[_LMLayer2SmoothChannel];
    if (_LMLayer2RoughnessMode) {
      smooth = 1 - smooth;
    }
    detailMask = masks[_LMLayer2DetailMaskChannel];
    occlusion = masks[_LMLayer2AOChannel];
    metal = remap(metal, 0, 1, _LMLayer2MetallicRemap.x, _LMLayer2MetallicRemap.y);
    smooth = remap(smooth, 0, 1, _LMLayer2SmoothnessRemap.x, _LMLayer2SmoothnessRemap.y);
    
    o.Metallic = lerp(o.Metallic, lerp(_LMLayer2Metallic, metal, hasMasks), mask);
    o.Smoothness = lerp(o.Smoothness, lerp(_LMLayer2Smoothness, smooth, hasMasks), mask);
    o.Occlusion = lerp(o.Occlusion, lerp(1, occlusion, _LMLayer2OcclusionStrength), mask);
    o.Normal = BlendNormals(o.Normal, normal);
    o.Albedo = lerp(o.Albedo, albedo.rgb * _LMLayer2Color.rgb, mask);
    o.Alpha = lerp(o.Albedo, albedo.a * _LMLayer2Color.a, mask);
    
    // quest only supports 2 layers
    #if defined(PLAT_QUEST)
      return;
    #endif
    
    UNITY_BRANCH
    if (_LayeredMatLayersCount < 3) return;
    
    // Layer 3
    uv = d.texcoord0.xy * _LMLayer3MainTex_ST.xy + _LMLayer3MainTex_ST.zw;
    mask = d.vertexColor.g;
        
    albedo = SAMPLE_TEXTURE2D(_LMLayer3MainTex, sampler_LMLayer1MainTex, uv);
    if (_LMLayer3AlbedoChannel > 0) {
      albedo.rgb = albedo[_LMLayer3AlbedoChannel].xxx;
    }
    masks = SAMPLE_TEXTURE2D(_LMLayer3MaskMap, sampler_LMLayer1MaskMap, uv);
    normalTex = SAMPLE_TEXTURE2D(_LMLayer3BumpMap, sampler_LMLayer1BumpMap, uv);
    if (_LMLayer3FlipBumpY) {
      normalTex.y = 1-normalTex.y;
    }
    normal = UnpackScaleNormal(normalTex, _LMLayer3BumpScale * mask);
    hasMasks = _LMLayer3MaskMap_TexelSize.z > 8; 
    metal = masks[_LMLayer3MetalChannel];
    smooth = masks[_LMLayer3SmoothChannel];
    if (_LMLayer3RoughnessMode) {
      smooth = 1 - smooth;
    }
    detailMask = masks[_LMLayer3DetailMaskChannel];
    occlusion = masks[_LMLayer3AOChannel];
    metal = remap(metal, 0, 1, _LMLayer3MetallicRemap.x, _LMLayer3MetallicRemap.y);
    smooth = remap(smooth, 0, 1, _LMLayer3SmoothnessRemap.x, _LMLayer3SmoothnessRemap.y);
    
    o.Metallic = lerp(o.Metallic, lerp(_LMLayer3Metallic, metal, hasMasks), mask);
    o.Smoothness = lerp(o.Smoothness, lerp(_LMLayer3Smoothness, smooth, hasMasks), mask);
    o.Occlusion = lerp(o.Occlusion, lerp(1, occlusion, _LMLayer3OcclusionStrength), mask);
    o.Normal = BlendNormals(o.Normal, normal);
    o.Albedo = lerp(o.Albedo, albedo.rgb * _LMLayer3Color.rgb, mask);
    o.Alpha = lerp(o.Albedo, albedo.a * _LMLayer3Color.a, mask);
    
    UNITY_BRANCH
    if (_LayeredMatLayersCount < 4) return;
    
    // Layer 4
    uv = d.texcoord0.xy * _LMLayer4MainTex_ST.xy + _LMLayer4MainTex_ST.zw;
    mask = d.vertexColor.b;
        
    albedo = SAMPLE_TEXTURE2D(_LMLayer4MainTex, sampler_LMLayer1MainTex, uv);
    if (_LMLayer4AlbedoChannel > 0) {
      albedo.rgb = albedo[_LMLayer4AlbedoChannel].xxx;
    }
    masks = SAMPLE_TEXTURE2D(_LMLayer4MaskMap, sampler_LMLayer1MaskMap, uv);
    normalTex = SAMPLE_TEXTURE2D(_LMLayer4BumpMap, sampler_LMLayer1BumpMap, uv);
    if (_LMLayer4FlipBumpY) {
      normalTex.y = 1-normalTex.y;
    }
    normal = UnpackScaleNormal(normalTex, _LMLayer4BumpScale * mask);
    hasMasks = _LMLayer4MaskMap_TexelSize.z > 8; 
    metal = masks[_LMLayer4MetalChannel];
    smooth = masks[_LMLayer4SmoothChannel];
    if (_LMLayer4RoughnessMode) {
      smooth = 1 - smooth;
    }
    detailMask = masks[_LMLayer4DetailMaskChannel];
    occlusion = masks[_LMLayer4AOChannel];
    metal = remap(metal, 0, 1, _LMLayer4MetallicRemap.x, _LMLayer4MetallicRemap.y);
    smooth = remap(smooth, 0, 1, _LMLayer4SmoothnessRemap.x, _LMLayer4SmoothnessRemap.y);
    
    o.Metallic = lerp(o.Metallic, lerp(_LMLayer4Metallic, metal, hasMasks), mask);
    o.Smoothness = lerp(o.Smoothness, lerp(_LMLayer4Smoothness, smooth, hasMasks), mask);
    o.Occlusion = lerp(o.Occlusion, lerp(1, occlusion, _LMLayer4OcclusionStrength), mask);
    o.Normal = BlendNormals(o.Normal, normal);
    o.Albedo = lerp(o.Albedo, albedo.rgb * _LMLayer4Color.rgb, mask);
    o.Alpha = lerp(o.Albedo, albedo.a * _LMLayer4Color.a, mask);
    #endif
  }
END_CODE
